import{_ as t,p as e,q as i,a1 as d}from"./framework-016e66c7.js";const a={},n=d('<h1 id="arc" tabindex="-1"><a class="header-anchor" href="#arc" aria-hidden="true">#</a> ARC</h1><table><thead><tr><th>Name</th><th>Size (per element)</th><th>Description</th></tr></thead><tbody><tr><td><a href="#entries">File Entries</a></td><td>variable</td><td>an index of all files within the ARC, contains size, offset location, and filename</td></tr><tr><td>File Contents</td><td>variable</td><td>all files&#39; data within the ARC</td></tr></tbody></table><h2 id="entries" tabindex="-1"><a class="header-anchor" href="#entries" aria-hidden="true">#</a> Entries</h2><table><thead><tr><th>Name</th><th>Size (per element)</th><th>Description</th></tr></thead><tbody><tr><td>Count</td><td>(int32)0x4</td><td>Amount of entries in the index</td></tr></tbody></table><p>(repeated per count)</p><table><thead><tr><th>Name</th><th>Size (per element)</th><th>Description</th></tr></thead><tbody><tr><td>File Name</td><td>variable</td><td>a string(int16 indicates length, then Little endian Unicode string of specified length) indicating file name</td></tr><tr><td>File position</td><td>(int32)0x4</td><td>indicates offset of a file within the ARC</td></tr><tr><td>File Size</td><td>(int32)0x4</td><td>indicates size in bytes of a file</td></tr></tbody></table><p>Each file from the entries can be read directly, due to the all neccesary information about the file being within the entry itself.</p>',7),r=[n];function h(l,o){return e(),i("div",null,r)}const c=t(a,[["render",h],["__file","index.html.vue"]]);export{c as default};
