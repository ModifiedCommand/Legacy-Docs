import{_ as a,M as i,p as o,q as s,R as t,t as e,N as r,a1 as n}from"./framework-016e66c7.js";const h={},l=t("h1",{id:"minecraft-legacy-save-files",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#minecraft-legacy-save-files","aria-hidden":"true"},"#"),e(" Minecraft Legacy Save Files")],-1),f={href:"https://github.com/UtterEvergreen1/Minecraft-LCE-Docs/tree/abcb714527234427dc26fdd22ab51756c0f73b99",target:"_blank",rel:"noopener noreferrer"},c=n('<h2 id="base-information" tabindex="-1"><a class="header-anchor" href="#base-information" aria-hidden="true">#</a> Base Information</h2><p>The following Table gives you Important information the structure of a Save file:</p><table><thead><tr><th>Name</th><th>Size (in bytes)</th><th>Description</th></tr></thead><tbody><tr><td>Offset(Int)</td><td>0x04</td><td>offset of File information</td></tr><tr><td>NumberOfFiles(Int)</td><td>0x04</td><td>Number of Files in list of File Info</td></tr><tr><td>Filedata</td><td>variable</td><td>bytes of each file contained inside the save</td></tr><tr><td><a href="#file-information">FileInfo</a></td><td>variable</td><td>Filenames, offsets within save, and size in bytes of files.</td></tr></tbody></table><h3 id="file-information" tabindex="-1"><a class="header-anchor" href="#file-information" aria-hidden="true">#</a> File Information</h3><table><thead><tr><th>Name</th><th>Size (in bytes)</th><th>Description</th></tr></thead><tbody><tr><td>Filename</td><td>0x80</td><td>Endian reverse Unicode string to dictate the path of the file</td></tr><tr><td>Filesize(Int)</td><td>0x04</td><td>Size of file in bytes</td></tr><tr><td>Offset(Int)</td><td>0x04</td><td>offset of file</td></tr></tbody></table><h3 id="mcr-structure" tabindex="-1"><a class="header-anchor" href="#mcr-structure" aria-hidden="true">#</a> MCR Structure</h3><p>The following Table gives you Important information the structure of a legacy edition mcr file:</p><table><thead><tr><th>Name</th><th>Size (in bytes)</th><th>Description</th></tr></thead><tbody><tr><td>locations</td><td>0x1000</td><td>offsets of the chunks within the region file, as well as X,Y positioning</td></tr><tr><td>timestamps</td><td>0x1000</td><td>timestamps for the chunks found within the previous sector</td></tr><tr><td>chunks and unused space</td><td>variable</td><td>chunks themselves, compressed with a different format per-console.</td></tr></tbody></table><h3 id="lce-buffers" tabindex="-1"><a class="header-anchor" href="#lce-buffers" aria-hidden="true">#</a> LCE buffers</h3>',9),u=t("thead",null,[t("tr",null,[t("th",null,"Platform"),t("th",null,"SAVEGAME"),t("th",null,"REGION"),t("th",null,"CHUNK/GRF")])],-1),b=t("tr",null,[t("td",null,"Xbox360"),t("td",null,"XMemcompress"),t("td",null,"None"),t("td",null,"XMemcompress (+ RLE)")],-1),m=t("td",null,"PS3",-1),p={href:"https://en.wikipedia.org/wiki/Deflate",target:"_blank",rel:"noopener noreferrer"},_=t("td",null,"None",-1),k=t("td",null,"Deflate(Algorithm) (+ RLE)",-1),x=t("tr",null,[t("td",null,"WiiU"),t("td",null,"Zlib"),t("td",null,"None"),t("td",null,"Zlib (+ RLE)")],-1),g=t("tr",null,[t("td",null,"PSVita"),t("td",null,"Vita RLE"),t("td",null,"None"),t("td",null,"Zlib (+ RLE)")],-1),y=t("tr",null,[t("td",null,"Switch"),t("td",null,"Zlib"),t("td",null,"Switch RLE"),t("td",null,"Zlib (+ RLE)")],-1),E=n('<h3 id="chunk-structure" tabindex="-1"><a class="header-anchor" href="#chunk-structure" aria-hidden="true">#</a> Chunk Structure</h3><p>The chunks on LCE utilize a different format to Java&#39;s MCR Chunks, this is the header information:</p><table><thead><tr><th>Name</th><th>Size (in bytes)</th><th>Description</th></tr></thead><tbody><tr><td><a href="#chunk-header-flag">FlagAndBuffer</a></td><td>0x04</td><td>Bit flag for RLE and an unknown value, plus 30 bits to specify the compressed buffer size</td></tr><tr><td>RLEUncompressedBuffer(Int)</td><td>0x04</td><td>Size of the buffer after RLE is performed</td></tr><tr><td>UncompressedBuffer(Int)</td><td>0x04</td><td>Size of the buffer before RLE is performed(only occurs on PS3)</td></tr><tr><td>Format</td><td>0x02</td><td>chunk format version (0xC is aquatic)</td></tr><tr><td>X(Int)</td><td>0x04</td><td>chunk X coordinate</td></tr><tr><td>Y(Int)</td><td>0x04</td><td>chunk X coordinate</td></tr><tr><td>LastUpdate</td><td>0x08</td><td>chunk Last-Updated Time</td></tr><tr><td>Inhabited</td><td>0x08</td><td>chunk Inhabited Time(Only on chunk version 8 and higher)</td></tr></tbody></table><h3 id="chunk-header-flag" tabindex="-1"><a class="header-anchor" href="#chunk-header-flag" aria-hidden="true">#</a> Chunk header flag</h3><p>Within the chunk header lies a 4-byte portion of data that dictates 2 flags and the compressed chunk size.</p><table><thead><tr><th>Name</th><th>Size (in bits)</th><th>Description</th></tr></thead><tbody><tr><td>RLE Flag</td><td>1</td><td>Flag for if to use RLE</td></tr><tr><td>Unknown Flag</td><td>1</td><td>It is unknown what this flag is</td></tr><tr><td>CompressedSize</td><td>30</td><td>compressed chunk size</td></tr></tbody></table>',6);function v(L,I){const d=i("ExternalLinkIcon");return o(),s("div",null,[l,t("p",null,[t("a",f,[e("Orginial Repository"),r(d)])]),c,t("table",null,[u,t("tbody",null,[b,t("tr",null,[m,t("td",null,[t("a",p,[e("Deflate(Algorithm)"),r(d)]),e(" or None")]),_,k]),x,g,y])]),E])}const N=a(h,[["render",v],["__file","index.html.vue"]]);export{N as default};
