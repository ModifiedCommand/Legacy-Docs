import{_ as t,p as e,q as a,a1 as d}from"./framework-016e66c7.js";const r={},n=d('<h1 id="loc" tabindex="-1"><a class="header-anchor" href="#loc" aria-hidden="true">#</a> LOC</h1><table><thead><tr><th>Name</th><th>Size (per element)</th><th>Description</th></tr></thead><tbody><tr><td>version</td><td>(int32)0x4</td><td>indicates format version</td></tr><tr><td>Language Count</td><td>(int32)0x4</td><td>how many languages are within the file</td></tr><tr><td><a href="#keys">Keys</a></td><td>variable</td><td>Keys for languages(only if version == 2)</td></tr><tr><td><a href="#languages-index">Language index</a></td><td>variable</td><td>index of all languages within the file</td></tr><tr><td><a href="#language">Language List</a></td><td>variable</td><td>All languages and strings within the file</td></tr></tbody></table><h2 id="languages-index" tabindex="-1"><a class="header-anchor" href="#languages-index" aria-hidden="true">#</a> Languages Index</h2><table><thead><tr><th>Name</th><th>Size (per element)</th><th>Description</th></tr></thead><tbody><tr><td>Language</td><td>(String)variable</td><td>index of all languages within the file</td></tr><tr><td>Unknown Integer</td><td>(int32)0x4</td><td>it is unknown what this does, but there is a 4 byte space after every language.</td></tr></tbody></table><p>(repeat per Language Count)</p><h2 id="language" tabindex="-1"><a class="header-anchor" href="#language" aria-hidden="true">#</a> Language</h2><table><thead><tr><th>Name</th><th>Size (per element)</th><th>Description</th></tr></thead><tbody><tr><td>ReadByte</td><td>(int32)0x4</td><td>indicates weather or not to read a single byte following this element</td></tr><tr><td>unknown byte</td><td>(byte)0x1</td><td>to only be read if the previous integer is greater than 0</td></tr><tr><td>Language</td><td>(string)variable</td><td>Language to be used(should be located within languages index)</td></tr><tr><td>String Count</td><td>(int32)0x4</td><td>number of strings within the language</td></tr><tr><td><a href="#string">Strings</a></td><td>variable</td><td>Strings within the language</td></tr></tbody></table><p>(repeat per Language Count)</p><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><table><thead><tr><th>Name</th><th>Size (per element)</th><th>Description</th></tr></thead><tbody><tr><td>Key</td><td>variable</td><td>will attempt to either look up key based on previous list, based on current position within strings, or read a new string from the file as the key.</td></tr><tr><td>Value</td><td>(string)variable</td><td>string entry contents</td></tr></tbody></table><p>(repeat per String Count)</p><h2 id="keys" tabindex="-1"><a class="header-anchor" href="#keys" aria-hidden="true">#</a> Keys</h2><table><thead><tr><th>Name</th><th>Size (per element)</th><th>Description</th></tr></thead><tbody><tr><td>Use Unique IDs</td><td>(bool)0x1</td><td>indicates if unique IDs will be used per-string</td></tr><tr><td>Key Count</td><td>(int32)0x4</td><td>how many Keys to be read</td></tr><tr><td>Key(*repeats per count)</td><td>(Hex ID)0x4 // string</td><td>unique key for strings, may either be a 4 byte hexadecimal ID or String itself</td></tr></tbody></table>',13),i=[n];function h(s,o){return e(),a("div",null,i)}const g=t(r,[["render",h],["__file","index.html.vue"]]);export{g as default};
